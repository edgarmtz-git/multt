// This is your complete Prisma schema file reconstructed from production migrations
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  IN_DELIVERY
  DELIVERED
  COMPLETED
  CANCELLED
  SHIPPED
}

enum InvitationStatus {
  PENDING
  USED
  EXPIRED
  CANCELLED
}

enum DeliveryType {
  FIXED
  DISTANCE
  ZONES
  MANUAL
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  name               String?
  password           String
  role               UserRole  @default(CLIENT)
  company            String?
  avatar             String?
  isActive           Boolean   @default(true)
  isSuspended        Boolean   @default(false)
  suspensionReason   String?
  suspendedAt        DateTime?
  lastLoginAt        DateTime?
  lastLoginIP        String?
  loginAttempts      Int       @default(0)
  lockedUntil        DateTime?
  passwordChangedAt  DateTime  @default(now())
  twoFactorEnabled   Boolean   @default(false)
  twoFactorSecret    String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relaciones
  products          Product[]
  categories        Category[]
  orders            Order[]
  storeSettings     StoreSettings?
  auditLogs         AuditLog[]
  invitations       Invitation[]
  deliveryZones     DeliveryZone[]
  globalOptions     GlobalOption[]

  @@map("users")
}

model Category {
  id               String   @id @default(cuid())
  name             String
  description      String?
  color            String   @default("#3B82F6")
  icon             String?
  order            Int      @default(0)
  isActive         Boolean  @default(true)
  imageUrl         String?
  isVisibleInStore Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String

  // Relaciones
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryProducts CategoryProduct[]

  @@map("categories")
}

model Product {
  id               String   @id @default(cuid())
  name             String
  description      String?
  price            Float
  stock            Int      @default(0)
  imageUrl         String?
  isActive         Boolean  @default(true)
  hasVariants      Boolean  @default(false)
  variantType      String?
  variantLabel     String?
  allowPickup      Boolean  @default(true)
  allowShipping    Boolean  @default(true)
  trackQuantity    Boolean  @default(false)
  dailyCapacity    Boolean  @default(false)
  maxDailySales    Int?
  maxOrderQuantity Boolean  @default(false)
  maxQuantity      Int?
  minOrderQuantity Boolean  @default(false)
  minQuantity      Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String

  // Relaciones
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryProducts    CategoryProduct[]
  variants            ProductVariant[]
  options             ProductOption[]
  images              ProductImage[]
  orderItems          OrderItem[]
  productGlobalOptions ProductGlobalOption[]

  @@map("products")
}

model CategoryProduct {
  id         String   @id @default(cuid())
  categoryId String
  productId  String
  order      Int      @default(0)
  createdAt  DateTime @default(now())

  // Relaciones
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([categoryId, productId])
  @@map("category_products")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  order     Int      @default(0)
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  productId String

  // Relaciones
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id            String   @id @default(cuid())
  name          String
  value         String
  price         Float
  originalPrice Float?
  imageUrl      String?
  sku           String?
  stock         Int?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  productId     String

  // Relaciones
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ProductOption {
  id            String  @id @default(cuid())
  name          String
  required      Boolean @default(false)
  maxSelections Int     @default(1)
  productId     String

  // Relaciones
  product Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  choices ProductOptionChoice[]

  @@map("product_options")
}

model ProductOptionChoice {
  id       String  @id @default(cuid())
  name     String
  price    Float
  isActive Boolean @default(true)
  order    Int     @default(0)
  optionId String

  // Relaciones
  option ProductOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@map("product_option_choices")
}

model Order {
  id               String      @id @default(cuid())
  orderNumber      String      @unique
  status           OrderStatus @default(PENDING)
  total            Float
  subtotal         Float?
  deliveryFee      Float       @default(0)
  customerName     String
  customerEmail    String?
  customerWhatsApp String
  deliveryMethod   String
  address          Json?
  paymentMethod    String
  amountPaid       Float?
  change           Float?
  notes            String?
  trackingUrl      String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  userId           String

  // Relaciones
  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  quantity    Int
  price       Float
  variantName String?
  createdAt   DateTime @default(now())
  orderId     String
  productId   String
  variantId   String?

  // Relaciones
  order   Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product           @relation(fields: [productId], references: [id])
  options OrderItemOption[]

  @@map("order_items")
}

model OrderItemOption {
  id          String   @id @default(cuid())
  orderItemId String
  optionName  String
  choiceName  String
  price       Float
  quantity    Int      @default(1)
  createdAt   DateTime @default(now())

  // Relaciones
  orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@map("order_item_options")
}

model Invitation {
  id             String           @id @default(cuid())
  code           String           @unique
  clientName     String
  clientEmail    String
  clientPhone    String?
  slug           String           @unique
  status         InvitationStatus @default(PENDING)
  expiresAt      DateTime
  usedAt         DateTime?
  createdAt      DateTime         @default(now())
  createdBy      String
  serviceStart   DateTime?
  serviceRenewal DateTime?
  isActive       Boolean          @default(false)
  userId         String

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invitations")
}

model StoreSettings {
  id                          String  @id @default(cuid())
  storeName                   String
  storeSlug                   String  @unique
  email                       String?
  country                     String  @default("Mexico")
  language                    String  @default("es")
  currency                    String  @default("MXN")
  distanceUnit                String  @default("km")
  mapProvider                 String? @default("GOOGLE")
  googleMapsApiKey            String?
  address                     Json?
  taxRate                     Float?
  taxMethod                   String  @default("included")
  enableBusinessHours         Boolean @default(false)
  disableCheckoutOutsideHours Boolean @default(false)
  businessHours               Json?
  deliveryEnabled             Boolean @default(false)
  useBasePrice                Boolean @default(false)
  baseDeliveryPrice           Float?
  baseDeliveryThreshold       Float?
  paymentsEnabled             Boolean @default(true)
  storeActive                 Boolean @default(true)
  passwordProtected           Boolean @default(false)
  whatsappMainNumber          String?
  phoneNumber                 String?
  cashPaymentEnabled          Boolean @default(false)
  bankTransferEnabled         Boolean @default(false)
  bankName                    String?
  accountNumber               String?
  accountHolder               String?
  clabe                       String?
  transferInstructions        String?
  paymentInstructions         String?
  cashPaymentInstructions     String?
  deliveryCalculationMethod   String?
  pricePerKm                  Float?
  minDeliveryFee              Float?
  maxDeliveryDistance         Float?
  manualDeliveryMessage       String?
  unifiedSchedule             String?
  bannerImage                 String?
  profileImage                String?
  deliveryScheduleEnabled     Boolean @default(false)
  scheduleType                String?
  advanceDays                 Int?
  serviceHours                Json?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  userId                      String   @unique

  // Relaciones
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  deliveryZones DeliveryZone[]

  @@map("store_settings")
}

model DeliveryZone {
  id                    String       @id @default(cuid())
  name                  String
  type                  DeliveryType @default(FIXED)
  fixedPrice            Float?
  freeDeliveryThreshold Float?
  estimatedTime         Int?
  description           String?
  isActive              Boolean      @default(true)
  order                 Int          @default(0)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  userId                String
  storeSettingsId       String?

  // Relaciones
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeSettings StoreSettings? @relation(fields: [storeSettingsId], references: [id], onDelete: Cascade)

  @@map("delivery_zones")
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  resource   String
  resourceId String?
  details    String?
  ipAddress  String?
  userAgent  String?
  success    Boolean  @default(true)
  createdAt  DateTime @default(now())
  userId     String

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model GlobalOption {
  id            String  @id @default(cuid())
  name          String
  required      Boolean @default(false)
  maxSelections Int     @default(1)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relaciones
  user                        User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  choices                     GlobalOptionChoice[]
  productGlobalOptions        ProductGlobalOption[]
  globalOptionAvailability    GlobalOptionAvailability[]

  @@map("global_options")
}

model GlobalOptionChoice {
  id             String   @id @default(cuid())
  name           String
  price          Float
  isActive       Boolean  @default(true)
  order          Int      @default(0)
  globalOptionId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relaciones
  globalOption                     GlobalOption                       @relation(fields: [globalOptionId], references: [id], onDelete: Cascade)
  globalOptionChoiceAvailability   GlobalOptionChoiceAvailability[]

  @@map("global_option_choices")
}

model ProductGlobalOption {
  id             String   @id @default(cuid())
  productId      String
  globalOptionId String
  order          Int      @default(0)
  createdAt      DateTime @default(now())

  // Relaciones
  product      Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  globalOption GlobalOption @relation(fields: [globalOptionId], references: [id], onDelete: Cascade)

  @@unique([productId, globalOptionId])
  @@map("product_global_options")
}

model GlobalOptionAvailability {
  id             String   @id @default(cuid())
  globalOptionId String
  available      Boolean  @default(true)
  reason         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relaciones
  globalOption GlobalOption @relation(fields: [globalOptionId], references: [id], onDelete: Cascade)

  @@unique([globalOptionId])
  @@map("global_option_availability")
}

model GlobalOptionChoiceAvailability {
  id                   String   @id @default(cuid())
  globalOptionChoiceId String
  available            Boolean  @default(true)
  reason               String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relaciones
  globalOptionChoice GlobalOptionChoice @relation(fields: [globalOptionChoiceId], references: [id], onDelete: Cascade)

  @@unique([globalOptionChoiceId])
  @@map("global_option_choice_availability")
}
