// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/schema-file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== USUARIOS ====================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  products     Product[]
  categories   Category[]
  orders       Order[]
  storeSettings StoreSettings?
  auditLogs    AuditLog[]
  invitations  Invitation[]

  @@map("users")
}

// ==================== PRODUCTOS ====================

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2) // Cambio de Float a Decimal
  stock       Int      @default(0)
  imageUrl    String?
  isActive    Boolean  @default(true)
  trackQuantity Boolean @default(false)
  hasVariants Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  // Relaciones
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  variants        ProductVariant[]
  options         ProductOption[]
  orderItems      OrderItem[]
  categoryProducts CategoryProduct[]

  @@map("products")
}

model ProductVariant {
  id        String   @id @default(cuid())
  name      String
  value     String
  price     Decimal  @db.Decimal(10, 2) // Cambio de Float a Decimal
  isActive  Boolean  @default(true)
  sku       String?
  imageUrl  String? // Imagen específica para esta variante
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ProductOption {
  id          String   @id @default(cuid())
  name        String
  type        String   @default("text") // 'text', 'number', 'date', 'checkbox', 'select', 'media'
  required    Boolean  @default(false)
  maxSelections Int?   // Para opciones múltiples
  isActive    Boolean  @default(true)
  productId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  product Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  choices ProductOptionChoice[]

  @@map("product_options")
}

model ProductOptionChoice {
  id        String   @id @default(cuid())
  name      String
  price     Decimal  @db.Decimal(10, 2) // Cambio de Float a Decimal
  isDefault Boolean  @default(false)
  isActive  Boolean  @default(true)
  optionId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  option ProductOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@map("product_option_choices")
}

// ==================== CATEGORÍAS ====================

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?  @default("#3B82F6")
  icon        String?  @default("📦")
  imageUrl    String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  isVisibleInStore Boolean @default(true)
  price       Decimal  @default(0) @db.Decimal(10, 2) // Cambio de Float a Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  // Relaciones
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryProducts CategoryProduct[]

  @@map("categories")
}

model CategoryProduct {
  id         String @id @default(cuid())
  categoryId String
  productId  String

  // Relaciones
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([categoryId, productId])
  @@map("category_products")
}

// ==================== ÓRDENES ====================

model Order {
  id               String    @id @default(cuid())
  orderNumber      String    @unique
  status           String    @default("PENDING") // 'PENDING', 'CONFIRMED', 'PREPARING', 'READY', 'DELIVERED', 'CANCELLED'
  total            Decimal   @db.Decimal(10, 2) // Cambio de Float a Decimal
  subtotal         Decimal   @db.Decimal(10, 2) // Cambio de Float a Decimal
  deliveryFee      Decimal?  @db.Decimal(10, 2) // Cambio de Float a Decimal
  customerName     String
  customerEmail    String?
  customerWhatsApp String
  deliveryMethod   String    @default("delivery") // 'delivery', 'pickup'
  address          Json?     // Dirección de entrega
  paymentMethod    String    @default("cash") // 'cash', 'transfer'
  amountPaid       Decimal?  @db.Decimal(10, 2) // Cambio de Float a Decimal
  change           Decimal?  @db.Decimal(10, 2) // Cambio de Float a Decimal
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  userId           String

  // Relaciones
  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  quantity    Int
  price       Decimal  @db.Decimal(10, 2) // Cambio de Float a Decimal
  variantName String?
  createdAt   DateTime @default(now())
  orderId     String
  productId   String

  // Relaciones
  order   Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product           @relation(fields: [productId], references: [id])
  options OrderItemOption[]

  @@map("order_items")
}

model OrderItemOption {
  id        String   @id @default(cuid())
  optionName String // Nombre de la opción (ej: "Tamaño")
  choiceName String // Nombre de la elección (ej: "Grande")
  price     Decimal  @db.Decimal(10, 2) // Cambio de Float a Decimal
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  orderItemId String

  // Relaciones
  orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@map("order_item_options")
}

// ==================== CONFIGURACIÓN DE TIENDA ====================

model StoreSettings {
  id        String   @id @default(cuid())
  storeName String
  storeSlug String   @unique
  country   String   @default("México")
  language  String   @default("es")
  currency  String   @default("MXN")
  distanceUnit String @default("km")
  mapProvider String @default("google")
  googleMapsApiKey String?
  
  // Configuración de impuestos
  taxRate   Decimal? @db.Decimal(5, 2) // Cambio de Float a Decimal
  taxMethod String?  @default("inclusive") // 'inclusive', 'exclusive'
  
  // Configuración de horarios
  enableBusinessHours Boolean @default(false)
  businessHours Json?
  disableCheckoutOutsideHours Boolean @default(false)
  
  // Configuración de entrega
  deliveryEnabled Boolean @default(true)
  useBasePrice Boolean @default(false)
  baseDeliveryPrice Decimal? @db.Decimal(10, 2) // Cambio de Float a Decimal
  baseDeliveryThreshold Decimal? @db.Decimal(10, 2) // Cambio de Float a Decimal
  
  // Configuración de métodos de cálculo de envío
  deliveryCalculationMethod String? // 'distance', 'zones', 'manual'
  pricePerKm                Decimal? @db.Decimal(10, 2) // Cambio de Float a Decimal
  minDeliveryFee            Decimal? @db.Decimal(10, 2) // Cambio de Float a Decimal
  maxDeliveryDistance       Decimal? @db.Decimal(10, 2) // Cambio de Float a Decimal
  manualDeliveryMessage     String? // Mensaje para cálculo manual
  
  // Configuración de pagos
  paymentsEnabled Boolean @default(true)
  
  // Configuración de la tienda
  storeActive Boolean @default(true)
  passwordProtected Boolean @default(false)
  storePassword String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("store_settings")
}

// ==================== ZONAS DE ENTREGA ====================

model DeliveryZone {
  id        String   @id @default(cuid())
  name      String
  price     Decimal  @db.Decimal(10, 2) // Cambio de Float a Decimal
  order     Int      @default(0)
  createdAt DateTime @default(now())
  userId    String

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("delivery_zones")
}

// ==================== INVITACIONES ====================

model Invitation {
  id          String   @id @default(cuid())
  code        String   @unique
  clientEmail String
  clientName  String?
  status      String   @default("PENDING") // 'PENDING', 'ACCEPTED', 'EXPIRED'
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  userId      String

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invitations")
}

// ==================== LOGS DE AUDITORÍA ====================

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String
  oldValues Json?
  newValues Json?
  userId    String
  createdAt DateTime @default(now())

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

// ==================== SESIONES ====================

model Session {
  id        String   @id @default(cuid())
  sessionToken String @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// ==================== ACCOUNTS (NextAuth) ====================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// ==================== VERIFICATION TOKENS ====================

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
