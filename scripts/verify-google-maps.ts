#!/usr/bin/env tsx

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function verifyGoogleMaps() {
  console.log('üîç Verificando configuraci√≥n de Google Maps...\n')

  try {
    // 1. Verificar configuraci√≥n en base de datos
    console.log('1. Verificando configuraci√≥n en base de datos...')
    const storeSettings = await prisma.storeSettings.findMany({
      where: { mapProvider: 'GOOGLE' }
    })

    if (storeSettings.length === 0) {
      console.log('‚ùå No se encontraron configuraciones con Google Maps')
      return
    }

    console.log(`‚úÖ Encontradas ${storeSettings.length} configuraciones con Google Maps`)
    
    storeSettings.forEach((settings, index) => {
      console.log(`   ${index + 1}. ${settings.storeName}`)
      console.log(`      - Proveedor: ${settings.mapProvider}`)
      console.log(`      - API Key: ${settings.googleMapsApiKey ? 'Configurada' : 'No configurada'}`)
      if (settings.googleMapsApiKey) {
        console.log(`      - Key: ${settings.googleMapsApiKey.substring(0, 20)}...`)
      }
    })

    // 2. Verificar que el servidor est√© funcionando
    console.log('\n2. Verificando servidor...')
    try {
      const response = await fetch('http://localhost:3000/api/auth/providers')
      if (response.ok) {
        console.log('‚úÖ Servidor funcionando en puerto 3000')
      } else {
        console.log('‚ö†Ô∏è  Servidor en puerto 3000 no responde correctamente')
      }
    } catch (error) {
      console.log('‚ùå Servidor en puerto 3000 no disponible')
      console.log('   Inicia el servidor con: npm run dev')
      return
    }

    // 3. Verificar configuraci√≥n de la API Key
    console.log('\n3. Verificando API Key...')
    const apiKey = storeSettings[0].googleMapsApiKey
    if (apiKey && apiKey.startsWith('AIzaSy')) {
      console.log('‚úÖ API Key v√°lida detectada')
      console.log(`   - Formato: ${apiKey.substring(0, 20)}...`)
      console.log('   - Longitud: Correcta')
    } else {
      console.log('‚ùå API Key no v√°lida o no configurada')
      return
    }

    console.log('\nüéâ ¬°Google Maps est√° completamente configurado!')
    console.log('\nüìã Para probar el mapa:')
    console.log('1. Ve a: http://localhost:3000/dashboard/settings')
    console.log('2. Inicia sesi√≥n con tu cuenta')
    console.log('3. Ve a la secci√≥n "Perfil"')
    console.log('4. En "Direcci√≥n", haz clic en "Agregar direcci√≥n"')
    console.log('5. ¬°Deber√≠as ver el mapa de Google Maps interactivo!')

    console.log('\nüó∫Ô∏è Funcionalidades del mapa:')
    console.log('‚úÖ Mapa interactivo de Google Maps')
    console.log('‚úÖ Marcador arrastrable (puedes moverlo)')
    console.log('‚úÖ Clic en el mapa para seleccionar ubicaci√≥n')
    console.log('‚úÖ Geocodificaci√≥n autom√°tica (convierte direcciones a coordenadas)')
    console.log('‚úÖ Coordenadas en tiempo real (muestra lat/lng)')
    console.log('‚úÖ Controles de zoom y navegaci√≥n')
    console.log('‚úÖ Diferentes tipos de mapa (sat√©lite, h√≠brido, etc.)')

    console.log('\nüí° Consejos de uso:')
    console.log('- Arrastra el marcador para ajustar la ubicaci√≥n exacta')
    console.log('- Haz clic en el mapa para mover el marcador')
    console.log('- Usa los controles de zoom para navegar')
    console.log('- Las coordenadas se actualizan autom√°ticamente')

  } catch (error) {
    console.error('‚ùå Error en la verificaci√≥n:', error)
  } finally {
    await prisma.$disconnect()
  }
}

verifyGoogleMaps()
