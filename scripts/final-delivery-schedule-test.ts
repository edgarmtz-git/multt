import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function finalDeliveryScheduleTest() {
  try {
    console.log('üéØ PRUEBA FINAL: HORARIOS DE ENTREGA\n')
    
    const userId = 'cmfwsez430001s63iz8wh5xd2'
    
    // 1. Verificar que los campos existen en la base de datos
    console.log('1Ô∏è‚É£ VERIFICANDO CAMPOS EN BASE DE DATOS...')
    const settings = await prisma.storeSettings.findFirst({
      where: { userId },
      select: {
        id: true,
        storeName: true,
        deliveryScheduleEnabled: true,
        scheduleType: true,
        advanceDays: true,
        serviceHours: true
      }
    })
    
    if (!settings) {
      console.log('‚ùå No se encontr√≥ configuraci√≥n de tienda')
      return
    }
    
    console.log(`‚úÖ Tienda: ${settings.storeName}`)
    console.log(`‚úÖ deliveryScheduleEnabled: ${settings.deliveryScheduleEnabled}`)
    console.log(`‚úÖ scheduleType: ${settings.scheduleType}`)
    console.log(`‚úÖ advanceDays: ${settings.advanceDays}`)
    console.log(`‚úÖ serviceHours: ${settings.serviceHours ? 'Configurado' : 'No configurado'}`)
    
    // 2. Simular una configuraci√≥n completa
    console.log('\n2Ô∏è‚É£ CONFIGURANDO HORARIOS DE ENTREGA...')
    
    const updatedSettings = await prisma.storeSettings.update({
      where: { id: settings.id },
      data: {
        deliveryScheduleEnabled: true,
        scheduleType: 'datetime',
        advanceDays: 3,
        serviceHours: JSON.stringify({
          monday: { isOpen: true, periods: [{ open: '09:00', close: '22:00' }] },
          tuesday: { isOpen: true, periods: [{ open: '09:00', close: '22:00' }] },
          wednesday: { isOpen: true, periods: [{ open: '09:00', close: '22:00' }] },
          thursday: { isOpen: true, periods: [{ open: '09:00', close: '22:00' }] },
          friday: { isOpen: true, periods: [{ open: '09:00', close: '23:00' }] },
          saturday: { isOpen: true, periods: [{ open: '10:00', close: '23:00' }] },
          sunday: { isOpen: true, periods: [{ open: '11:00', close: '21:00' }] }
        })
      }
    })
    
    console.log('‚úÖ CONFIGURACI√ìN ACTUALIZADA:')
    console.log(`  - Habilitado: ${updatedSettings.deliveryScheduleEnabled}`)
    console.log(`  - Tipo: ${updatedSettings.scheduleType}`)
    console.log(`  - Anticipaci√≥n: ${updatedSettings.advanceDays} d√≠as`)
    console.log(`  - Horarios: ${updatedSettings.serviceHours ? 'Configurados' : 'No configurados'}`)
    
    // 3. Verificar que se persisti√≥ correctamente
    console.log('\n3Ô∏è‚É£ VERIFICANDO PERSISTENCIA...')
    const verifySettings = await prisma.storeSettings.findFirst({
      where: { userId },
      select: {
        deliveryScheduleEnabled: true,
        scheduleType: true,
        advanceDays: true,
        serviceHours: true
      }
    })
    
    const isCorrectlySaved = 
      verifySettings?.deliveryScheduleEnabled === true &&
      verifySettings?.scheduleType === 'datetime' &&
      verifySettings?.advanceDays === 3 &&
      verifySettings?.serviceHours !== null
    
    if (isCorrectlySaved) {
      console.log('üéâ ¬°HORARIOS DE ENTREGA GUARDADOS Y PERSISTIDOS CORRECTAMENTE!')
      console.log('\nüìã RESUMEN:')
      console.log('  ‚úÖ Campos agregados al esquema de base de datos')
      console.log('  ‚úÖ API actualizada para manejar los nuevos campos')
      console.log('  ‚úÖ Configuraci√≥n guardada correctamente')
      console.log('  ‚úÖ Datos persisten despu√©s de la actualizaci√≥n')
      
      console.log('\nüåê PR√ìXIMOS PASOS:')
      console.log('  1. Inicia sesi√≥n en http://localhost:3000/login')
      console.log('  2. Ve a http://localhost:3000/dashboard/settings')
      console.log('  3. Pesta√±a "Entregas" ‚Üí "Horarios de entrega"')
      console.log('  4. Habilita "Habilitar horarios de entrega"')
      console.log('  5. Configura el tipo de selector y d√≠as de anticipaci√≥n')
      console.log('  6. Guarda los cambios')
      console.log('  7. Refresca la p√°gina - los cambios deber√≠an persistir')
      
    } else {
      console.log('‚ùå Error: Los datos no se guardaron correctamente')
    }
    
  } catch (error) {
    console.error('‚ùå Error en prueba final:', error)
  } finally {
    await prisma.$disconnect()
  }
}

finalDeliveryScheduleTest()
