#!/usr/bin/env tsx

import { PrismaClient } from '@prisma/client'
import { prisma } from '../lib/prisma'

/**
 * Script para migrar precios de Float a Decimal
 * Mejora la precisi√≥n financiera del sistema
 */

interface PriceMigrationStats {
  products: number
  variants: number
  orderItems: number
  orderItemOptions: number
  deliveryZones: number
  categories: number
  totalRecords: number
}

async function migratePricesToDecimal(): Promise<PriceMigrationStats> {
  console.log('üí∞ Iniciando migraci√≥n de precios Float a Decimal...')
  
  const stats: PriceMigrationStats = {
    products: 0,
    variants: 0,
    orderItems: 0,
    orderItemOptions: 0,
    deliveryZones: 0,
    categories: 0,
    totalRecords: 0
  }

  try {
    // 1. Migrar precios de productos
    console.log('\nüì¶ Migrando precios de productos...')
    const products = await prisma.product.findMany({
      select: { id: true, price: true }
    })
    
    for (const product of products) {
      await prisma.product.update({
        where: { id: product.id },
        data: { 
          price: parseFloat(product.price.toFixed(2))
        }
      })
      stats.products++
    }
    console.log(`   ‚úÖ ${stats.products} productos migrados`)

    // 2. Migrar precios de variantes
    console.log('\nüîÑ Migrando precios de variantes...')
    const variants = await prisma.productVariant.findMany({
      select: { id: true, price: true }
    })
    
    for (const variant of variants) {
      await prisma.productVariant.update({
        where: { id: variant.id },
        data: { 
          price: parseFloat(variant.price.toFixed(2))
        }
      })
      stats.variants++
    }
    console.log(`   ‚úÖ ${stats.variants} variantes migradas`)

    // 3. Migrar precios de items de orden
    console.log('\nüõí Migrando precios de items de orden...')
    const orderItems = await prisma.orderItem.findMany({
      select: { id: true, price: true }
    })
    
    for (const item of orderItems) {
      await prisma.orderItem.update({
        where: { id: item.id },
        data: { 
          price: parseFloat(item.price.toFixed(2))
        }
      })
      stats.orderItems++
    }
    console.log(`   ‚úÖ ${stats.orderItems} items de orden migrados`)

    // 4. Migrar precios de opciones de items
    console.log('\n‚öôÔ∏è Migrando precios de opciones de items...')
    const orderItemOptions = await prisma.orderItemOption.findMany({
      select: { id: true, price: true }
    })
    
    for (const option of orderItemOptions) {
      await prisma.orderItemOption.update({
        where: { id: option.id },
        data: { 
          price: parseFloat(option.price.toFixed(2))
        }
      })
      stats.orderItemOptions++
    }
    console.log(`   ‚úÖ ${stats.orderItemOptions} opciones de items migradas`)

    // 5. Migrar precios de zonas de entrega
    console.log('\nüöö Migrando precios de zonas de entrega...')
    const deliveryZones = await prisma.deliveryZone.findMany({
      select: { id: true, price: true }
    })
    
    for (const zone of deliveryZones) {
      await prisma.deliveryZone.update({
        where: { id: zone.id },
        data: { 
          price: parseFloat(zone.price.toFixed(2))
        }
      })
      stats.deliveryZones++
    }
    console.log(`   ‚úÖ ${stats.deliveryZones} zonas de entrega migradas`)

    // 6. Migrar precios de categor√≠as
    console.log('\nüè∑Ô∏è Migrando precios de categor√≠as...')
    const categories = await prisma.category.findMany({
      select: { id: true, price: true }
    })
    
    for (const category of categories) {
      await prisma.category.update({
        where: { id: category.id },
        data: { 
          price: parseFloat(category.price.toFixed(2))
        }
      })
      stats.categories++
    }
    console.log(`   ‚úÖ ${stats.categories} categor√≠as migradas`)

    // Calcular total
    stats.totalRecords = stats.products + stats.variants + stats.orderItems + 
                        stats.orderItemOptions + stats.deliveryZones + stats.categories

    console.log('\nüéâ Migraci√≥n completada exitosamente!')
    console.log('\nüìä Estad√≠sticas de migraci√≥n:')
    console.log(`   üì¶ Productos: ${stats.products}`)
    console.log(`   üîÑ Variantes: ${stats.variants}`)
    console.log(`   üõí Items de orden: ${stats.orderItems}`)
    console.log(`   ‚öôÔ∏è Opciones de items: ${stats.orderItemOptions}`)
    console.log(`   üöö Zonas de entrega: ${stats.deliveryZones}`)
    console.log(`   üè∑Ô∏è Categor√≠as: ${stats.categories}`)
    console.log(`   üìà Total de registros: ${stats.totalRecords}`)

    return stats

  } catch (error) {
    console.error('‚ùå Error durante la migraci√≥n:', error)
    throw error
  }
}

async function validatePricePrecision(): Promise<void> {
  console.log('\nüîç Validando precisi√≥n de precios...')
  
  try {
    // Verificar que no hay precios con m√°s de 2 decimales
    const problematicProducts = await prisma.product.findMany({
      where: {
        price: {
          not: {
            equals: prisma.product.fields.price
          }
        }
      },
      select: { id: true, name: true, price: true }
    })

    if (problematicProducts.length > 0) {
      console.log('‚ö†Ô∏è Productos con problemas de precisi√≥n:')
      problematicProducts.forEach(product => {
        console.log(`   - ${product.name}: ${product.price}`)
      })
    } else {
      console.log('‚úÖ Todos los precios tienen precisi√≥n correcta')
    }

    // Verificar c√°lculos de totales
    const orders = await prisma.order.findMany({
      select: { 
        id: true, 
        total: true, 
        subtotal: true, 
        deliveryFee: true,
        items: {
          select: {
            price: true,
            quantity: true
          }
        }
      },
      take: 5
    })

    console.log('\nüßÆ Validando c√°lculos de totales:')
    orders.forEach(order => {
      const calculatedSubtotal = order.items.reduce((sum, item) => 
        sum + (item.price * item.quantity), 0
      )
      const calculatedTotal = calculatedSubtotal + (order.deliveryFee || 0)
      
      console.log(`   Orden ${order.id}:`)
      console.log(`     Subtotal calculado: ${calculatedSubtotal.toFixed(2)}`)
      console.log(`     Subtotal almacenado: ${order.subtotal}`)
      console.log(`     Total calculado: ${calculatedTotal.toFixed(2)}`)
      console.log(`     Total almacenado: ${order.total}`)
    })

  } catch (error) {
    console.error('‚ùå Error validando precisi√≥n:', error)
    throw error
  }
}

async function createBackup(): Promise<void> {
  console.log('\nüíæ Creando backup de precios...')
  
  try {
    const backupData = {
      timestamp: new Date().toISOString(),
      products: await prisma.product.findMany({
        select: { id: true, name: true, price: true }
      }),
      variants: await prisma.productVariant.findMany({
        select: { id: true, name: true, price: true }
      }),
      orderItems: await prisma.orderItem.findMany({
        select: { id: true, price: true }
      })
    }

    const fs = await import('fs/promises')
    const backupPath = `./prisma/price-backup-${Date.now()}.json`
    await fs.writeFile(backupPath, JSON.stringify(backupData, null, 2))
    
    console.log(`   ‚úÖ Backup creado: ${backupPath}`)
  } catch (error) {
    console.error('‚ùå Error creando backup:', error)
    throw error
  }
}

/**
 * Funci√≥n principal
 */
async function main() {
  console.log('üöÄ Iniciando migraci√≥n de precios Float a Decimal')
  
  try {
    // 1. Crear backup
    await createBackup()
    
    // 2. Migrar precios
    const stats = await migratePricesToDecimal()
    
    // 3. Validar precisi√≥n
    await validatePricePrecision()
    
    console.log('\nüéØ Recomendaciones post-migraci√≥n:')
    console.log('   1. Actualizar el schema.prisma para usar Decimal en lugar de Float')
    console.log('   2. Ejecutar prisma generate para actualizar el cliente')
    console.log('   3. Verificar que todos los c√°lculos funcionen correctamente')
    console.log('   4. Probar operaciones de pago y facturaci√≥n')
    
  } catch (error) {
    console.error('‚ùå Error en la migraci√≥n:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main()
}

export { migratePricesToDecimal, validatePricePrecision, createBackup }
